<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Darts Checkout App & Scorer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Basic styling and animations */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
            /* Ensure body takes at least screen height */
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        /* Fade-in animation for results/feedback */
        .result-item, .feedback-item {
            opacity: 0;
            transform: translateY(10px);
            animation: fadeIn 0.5s ease-out forwards;
        }
        @keyframes fadeIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        /* Style placeholder text */
        input::placeholder {
            color: #9ca3af; /* Gray-400 */
            opacity: 1;
        }
        /* Mode button styling */
        .mode-button-active {
            background-color: #dc2626; /* Red-600 */
            color: white;
        }
        .mode-button-inactive {
            background-color: #e5e7eb; /* Gray-200 */
            color: #374151; /* Gray-700 */
        }
        /* Utility to hide elements */
        .hidden {
            display: none;
        }
        /* Hide number input spinners (cross-browser) */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        input[type=number] {
            -moz-appearance: textfield; /* Firefox */
        }
        /* Highlight for current player in 501 */
        .current-player-highlight {
            background-color: #dcfce7; /* Green-100 */
            border: 2px solid #86efac; /* Green-300 */
        }
        /* Disabled button styling */
        button:disabled {
            background-color: #d1d5db; /* Gray-300 */
            cursor: not-allowed;
        }
        button:disabled:hover {
             background-color: #d1d5db; /* Keep same color on hover when disabled */
        }
    </style>
</head>
<body class="p-4">

    <div class="bg-white p-6 sm:p-8 rounded-xl shadow-lg w-full max-w-lg mx-auto">
        <h1 class="text-2xl sm:text-3xl font-bold text-center mb-6 text-gray-800">ðŸŽ¯ Darts Suite</h1>

        <div class="flex flex-wrap justify-center gap-2 mb-6">
            <button id="lookupModeBtn" class="mode-button mode-button-active px-3 py-2 rounded-lg font-medium transition duration-150 ease-in-out text-sm sm:text-base">Checkout Lookup</button>
            <button id="gameModeBtn" class="mode-button mode-button-inactive px-3 py-2 rounded-lg font-medium transition duration-150 ease-in-out text-sm sm:text-base">Practice Game</button>
            <button id="trackerModeBtn" class="mode-button mode-button-inactive px-3 py-2 rounded-lg font-medium transition duration-150 ease-in-out text-sm sm:text-base">501 Score Tracker</button>
        </div>

        <div id="lookupModeSection">
             <h2 class="text-xl font-semibold text-gray-700 mb-4 text-center">Find a Checkout</h2>
             <div class="mb-4">
                 <label for="scoreInputLookup" class="block text-sm font-medium text-gray-700 mb-2">Enter score remaining:</label>
                 <input type="number" id="scoreInputLookup" name="scoreInputLookup" placeholder="e.g., 100" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent transition duration-150 ease-in-out" inputmode="numeric" pattern="[0-9]*">
             </div>
             <button id="calculateBtnLookup" class="w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-4 rounded-lg shadow transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 mb-6">
                 Find Checkouts
             </button>
             <div id="resultsLookup" class="mt-4">
                 <h3 class="text-lg font-semibold text-gray-700 mb-3">Possible Checkouts:</h3>
                 <div id="checkoutListLookup" class="space-y-2">
                     <p class="text-gray-500">Enter a score between 2 and 170.</p>
                 </div>
             </div>
             <div id="messageAreaLookup" class="mt-4 text-center text-red-500 font-medium"></div>
        </div>

        <div id="gameModeSection" class="hidden">
             <h2 class="text-xl font-semibold text-gray-700 mb-4 text-center">Practice Your Finishes!</h2>
             <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                 <div>
                     <label for="minScoreInput" class="block text-sm font-medium text-gray-700 mb-1">Min Score:</label>
                     <input type="number" id="minScoreInput" name="minScoreInput" value="2" min="2" max="170" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-150 ease-in-out" inputmode="numeric">
                 </div>
                 <div>
                     <label for="maxScoreInput" class="block text-sm font-medium text-gray-700 mb-1">Max Score:</label>
                     <input type="number" id="maxScoreInput" name="maxScoreInput" value="170" min="2" max="170" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-150 ease-in-out" inputmode="numeric">
                 </div>
             </div>
             <p class="text-xs text-gray-500 text-center mb-4 -mt-2">Set range & click 'New Game'</p>
             <div class="text-center mb-4 p-4 bg-gray-100 rounded-lg">
                 <p class="text-sm font-medium text-gray-600">Score to checkout:</p>
                 <p id="gameScoreDisplay" class="text-3xl sm:text-4xl font-bold text-red-600">-</p>
             </div>
             <div class="mb-4">
                 <label for="scoreInputGame" class="block text-sm font-medium text-gray-700 mb-2">Your checkout attempt (e.g., T20, D20):</label>
                 <input type="text" id="scoreInputGame" name="scoreInputGame" placeholder="T20, D20 or T19 D16 etc." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-150 ease-in-out">
             </div>
             <div class="flex flex-col gap-2 mb-4">
                 <button id="submitAnswerBtn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg shadow transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2" disabled>
                     Check My Answer
                 </button>
                 <button id="revealAnswerBtn" class="w-full bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-3 px-4 rounded-lg shadow transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2" disabled>
                     Reveal Answer
                 </button>
             </div>
             <div id="feedbackAreaGame" class="mt-4 text-center font-medium min-h-[2em]"></div>
             <button id="newGameBtn" class="w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-4 rounded-lg shadow transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
                 New Game
             </button>
        </div>

        <div id="scoreTrackerModeSection" class="hidden">
             <h2 class="text-xl font-semibold text-gray-700 mb-4 text-center">501 Score Tracker</h2>
             <div class="grid grid-cols-2 gap-2 mb-3">
                 <div>
                     <label for="player1NameInput" class="block text-sm font-medium text-gray-700 mb-1">Player 1:</label>
                     <input type="text" id="player1NameInput" value="Player 1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-150 ease-in-out text-sm">
                 </div>
                 <div>
                     <label for="player2NameInput" class="block text-sm font-medium text-gray-700 mb-1">Player 2:</label>
                     <input type="text" id="player2NameInput" value="Player 2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-150 ease-in-out text-sm">
                 </div>
             </div>
             <div class="grid grid-cols-2 gap-2 mb-3">
                 <div id="player1Display" class="p-2 sm:p-3 border border-gray-200 rounded-lg text-center transition-colors duration-300">
                     <p id="player1NameDisplay" class="font-semibold text-base sm:text-lg text-gray-800 truncate">Player 1</p>
                     <p id="player1Score" class="text-2xl sm:text-4xl font-bold text-indigo-600">501</p>
                     <p class="text-xs text-gray-500 mt-1">(Wins: <span id="player1GamesWon" class="font-medium">0</span>)</p>
                 </div>
                 <div id="player2Display" class="p-2 sm:p-3 border border-gray-200 rounded-lg text-center transition-colors duration-300">
                     <p id="player2NameDisplay" class="font-semibold text-base sm:text-lg text-gray-800 truncate">Player 2</p>
                     <p id="player2Score" class="text-2xl sm:text-4xl font-bold text-indigo-600">501</p>
                     <p class="text-xs text-gray-500 mt-1">(Wins: <span id="player2GamesWon" class="font-medium">0</span>)</p>
                 </div>
             </div>
             <p id="currentPlayerIndicator" class="text-center font-semibold text-gray-700 mb-3">Current Player: -</p>
             <div class="mb-3">
                 <label for="turnScoreInput" class="block text-sm font-medium text-gray-700 mb-2">Enter score this turn (0-180):</label>
                 <input type="number" id="turnScoreInput" name="turnScoreInput" placeholder="e.g., 100" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-150 ease-in-out" inputmode="numeric" pattern="[0-9]*" min="0" max="180">
             </div>
             <div class="flex flex-col sm:flex-row gap-2 mb-3">
                 <button id="submitTurnScoreBtn" class="flex-grow w-full sm:w-auto bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 px-4 rounded-lg shadow transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                     Submit Score
                 </button>
                 <button id="undoTurnBtn" class="w-full sm:w-auto bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-3 px-4 rounded-lg shadow transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2" disabled>
                     Undo
                 </button>
             </div>
             <div id="messageArea501" class="mt-3 text-center font-medium min-h-[2em]"></div>
             <div id="checkoutSuggestion501" class="mt-2 text-center"></div>
             <button id="reset501GameBtn" class="w-full mt-4 bg-gray-500 hover:bg-gray-600 text-white font-semibold py-3 px-4 rounded-lg shadow transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
                 Reset Leg
             </button>
        </div>
    </div>

    <script>
        // --- Checkout Data (Standard Finishes) ---
        // Comprehensive list of standard checkouts from 170 down to 2.
        const checkouts = {
            170: ["T20 -> T20 -> DB"], 167: ["T20 -> T19 -> DB"], 164: ["T20 -> T18 -> DB", "T19 -> T19 -> DB"], 161: ["T20 -> T17 -> DB"], 160: ["T20 -> T20 -> D20"],
            158: ["T20 -> T20 -> D19"], 157: ["T20 -> T19 -> D20"], 156: ["T20 -> T20 -> D18"], 155: ["T20 -> T19 -> D19"], 154: ["T20 -> T18 -> D20"], 153: ["T20 -> T19 -> D18"],
            152: ["T20 -> T20 -> D16"], 151: ["T20 -> T17 -> D20"], 150: ["T20 -> T18 -> D18", "T19 -> T19 -> D18"], 149: ["T20 -> T19 -> D16"], 148: ["T20 -> T16 -> D20"],
            147: ["T20 -> T17 -> D18", "T19 -> T18 -> D18"], 146: ["T20 -> T18 -> D16", "T19 -> T17 -> D19"], 145: ["T20 -> T15 -> D20"], 144: ["T20 -> T20 -> D12"],
            143: ["T20 -> T17 -> D16"], 142: ["T20 -> T14 -> D20"], 141: ["T20 -> T19 -> D12"], 140: ["T20 -> T20 -> D10", "T19 -> T11 -> DB"], 139: ["T19 -> T14 -> D20", "T20 -> T13 -> D20"],
            138: ["T20 -> T18 -> D12"], 137: ["T19 -> T16 -> D16"], 136: ["T20 -> T20 -> D8"], 135: ["T20 -> T17 -> D12", "DB -> T15 -> D20"], 134: ["T20 -> T14 -> D16"],
            133: ["T20 -> T19 -> D8"], 132: ["T20 -> T16 -> D12", "DB -> T14 -> D20"], 131: ["T20 -> T13 -> D16"], 130: ["T20 -> T20 -> D5", "T20 -> S18 -> DB"], 129: ["T19 -> T16 -> D12"],
            128: ["T18 -> T14 -> D16", "T20 -> T12 -> D16"], 127: ["T20 -> T17 -> D8"], 126: ["T19 -> T19 -> D6", "T19 -> S19 -> DB"], 125: ["SB -> T20 -> D20"], 124: ["T20 -> T16 -> D8"],
            123: ["T19 -> T16 -> D9"], 122: ["T18 -> T20 -> D4", "T18 -> S18 -> DB"], 121: ["T20 -> T11 -> D14", "T17 -> S20 -> DB"], 120: ["T20 -> S20 -> D20"], 119: ["T19 -> T12 -> D13", "T20 -> S19 -> D20"],
            118: ["T20 -> S18 -> D20"], 117: ["T20 -> S17 -> D20"], 116: ["T20 -> S16 -> D20", "T19 -> S19 -> D20"], 115: ["T20 -> S15 -> D20", "T19 -> S18 -> D20"], 114: ["T20 -> S14 -> D20", "T18 -> S20 -> D20"],
            113: ["T20 -> S13 -> D20", "T19 -> S16 -> D20"], 112: ["T20 -> S12 -> D20", "T18 -> S18 -> D20"], 111: ["T20 -> S11 -> D20", "T19 -> S14 -> D20"], 110: ["T20 -> S10 -> D20", "T20 -> DB"],
            109: ["T19 -> S12 -> D20", "T20 -> S9 -> D20"], 108: ["T20 -> S16 -> D16", "T19 -> S11 -> D20"], 107: ["T19 -> S10 -> D20", "T19 -> DB"], 106: ["T20 -> S6 -> D20", "T18 -> S12 -> D20"],
            105: ["T20 -> S5 -> D20", "T19 -> S8 -> D20"], 104: ["T18 -> S10 -> D20", "T19 -> DB"], 103: ["T19 -> S6 -> D20", "T17 -> S12 -> D20"], 102: ["T20 -> S2 -> D20", "T18 -> S8 -> D20"],
            101: ["T17 -> S10 -> D20", "T20 -> DB"], 100: ["T20 -> D20"], 99: ["T19 -> S10 -> D16", "T17 -> S16 -> D16"], 98: ["T20 -> D19"], 97: ["T19 -> D20"], 96: ["T20 -> D18"],
            95: ["T19 -> D19", "SB -> T20 -> D10"], 94: ["T18 -> D20"], 93: ["T19 -> D18"], 92: ["T20 -> D16"], 91: ["T17 -> D20"], 90: ["T20 -> D15", "T18 -> D18"], 89: ["T19 -> D16"],
            88: ["T20 -> D14", "T16 -> D20"], 87: ["T17 -> D18"], 86: ["T18 -> D16"], 85: ["T15 -> D20", "T19 -> D14"], 84: ["T20 -> D12", "T16 -> D18"], 83: ["T17 -> D16"],
            82: ["T14 -> D20", "DB -> D16"], 81: ["T19 -> D12", "T15 -> D18"], 80: ["T20 -> D10", "T16 -> D16"], 79: ["T13 -> D20", "T19 -> D11"], 78: ["T18 -> D12", "T14 -> D18"],
            77: ["T15 -> D16", "T19 -> D10"], 76: ["T20 -> D8", "T16 -> D14"], 75: ["T17 -> D12", "T13 -> D18"], 74: ["T14 -> D16", "T18 -> D10"], 73: ["T19 -> D8", "T11 -> D20"],
            72: ["T12 -> D18", "T16 -> D12"], 71: ["T13 -> D16", "T17 -> D10"], 70: ["T10 -> D20", "T18 -> D8"], 69: ["T19 -> D6", "T11 -> D18"], 68: ["T20 -> D4", "T16 -> D10"],
            67: ["T17 -> D8", "T9 -> D20"], 66: ["T10 -> D18", "T14 -> D12"], 65: ["T11 -> D16", "SB -> D20"], 64: ["T16 -> D8", "T8 -> D20"], 63: ["T13 -> D12", "T7 -> D20"],
            62: ["T10 -> D16", "T14 -> D10"], 61: ["T15 -> D8", "SB -> D18"], 60: ["S20 -> D20", "T20"], 59: ["S19 -> D20", "T13 -> D10"], 58: ["S18 -> D20", "T10 -> D14"],
            57: ["S17 -> D20", "T19"], 56: ["S16 -> D20", "T16 -> D4"], 55: ["S15 -> D20", "T11 -> D11"], 54: ["S14 -> D20", "T18"], 53: ["S13 -> D20", "T9 -> D13"],
            52: ["S12 -> D20", "T12 -> D8"], 51: ["S11 -> D20", "T17"], 50: ["DB", "S10 -> D20", "S18 -> D16"], 49: ["S9 -> D20", "S17 -> D16"], 48: ["S16 -> D16", "S8 -> D20"],
            47: ["S15 -> D16", "S7 -> D20"], 46: ["S6 -> D20", "S14 -> D16"], 45: ["S13 -> D16", "S5 -> D20"], 44: ["S12 -> D16", "S4 -> D20"], 43: ["S11 -> D16", "S3 -> D20"],
            42: ["S10 -> D16", "S2 -> D20"], 41: ["S9 -> D16", "S1 -> D20"], 40: ["D20"], 39: ["S7 -> D16"], 38: ["D19", "S6 -> D16"], 37: ["S5 -> D16"], 36: ["D18", "S4 -> D16"],
            35: ["S3 -> D16"], 34: ["D17", "S2 -> D16"], 33: ["S1 -> D16", "S17 -> D8"], 32: ["D16"], 31: ["S15 -> D8", "S7 -> D12"], 30: ["D15", "S14 -> D8"], 29: ["S13 -> D8", "S5 -> D12"],
            28: ["D14", "S12 -> D8"], 27: ["S11 -> D8", "S19 -> D4"], 26: ["D13", "S10 -> D8"], 25: ["S9 -> D8", "S17 -> D4"], 24: ["D12", "S8 -> D8"], 23: ["S7 -> D8", "S15 -> D4"],
            22: ["D11", "S6 -> D8"], 21: ["S5 -> D8", "S13 -> D4"], 20: ["D10", "S4 -> D8"], 19: ["S3 -> D8", "S11 -> D4"], 18: ["D9", "S2 -> D8"], 17: ["S1 -> D8", "S9 -> D4"],
            16: ["D8"], 15: ["S7 -> D4"], 14: ["D7", "S6 -> D4"], 13: ["S5 -> D4"], 12: ["D6", "S4 -> D4"], 11: ["S3 -> D4"], 10: ["D5", "S2 -> D4"], 9: ["S1 -> D4"],
            8: ["D4"], 7: ["S3 -> D2"], 6: ["D3"], 5: ["S1 -> D2"], 4: ["D2"], 3: ["S1 -> D1"], 2: ["D1"],
        };
        // Scores impossible to finish in 3 darts
        const impossibleCheckouts = [169, 168, 166, 165, 163, 162, 159];
        // Array to hold scores that have checkouts listed
        let finishableScores = [];

        // --- DOM Elements ---
        // Get references to all interactive elements on the page
        const lookupModeBtn = document.getElementById('lookupModeBtn');
        const gameModeBtn = document.getElementById('gameModeBtn');
        const trackerModeBtn = document.getElementById('trackerModeBtn');
        const lookupModeSection = document.getElementById('lookupModeSection');
        const gameModeSection = document.getElementById('gameModeSection');
        const scoreTrackerModeSection = document.getElementById('scoreTrackerModeSection');
        // Lookup Mode Elements
        const scoreInputLookup = document.getElementById('scoreInputLookup');
        const calculateBtnLookup = document.getElementById('calculateBtnLookup');
        const checkoutListLookup = document.getElementById('checkoutListLookup');
        const messageAreaLookup = document.getElementById('messageAreaLookup');
        // Game Mode Elements
        const minScoreInput = document.getElementById('minScoreInput');
        const maxScoreInput = document.getElementById('maxScoreInput');
        const gameScoreDisplay = document.getElementById('gameScoreDisplay');
        const scoreInputGame = document.getElementById('scoreInputGame');
        const submitAnswerBtn = document.getElementById('submitAnswerBtn');
        const revealAnswerBtn = document.getElementById('revealAnswerBtn');
        const feedbackAreaGame = document.getElementById('feedbackAreaGame');
        const newGameBtn = document.getElementById('newGameBtn');
        // 501 Tracker Mode Elements
        const player1NameInput = document.getElementById('player1NameInput');
        const player2NameInput = document.getElementById('player2NameInput');
        const player1NameDisplay = document.getElementById('player1NameDisplay');
        const player2NameDisplay = document.getElementById('player2NameDisplay');
        const player1Score = document.getElementById('player1Score');
        const player2Score = document.getElementById('player2Score');
        const player1GamesWon = document.getElementById('player1GamesWon');
        const player2GamesWon = document.getElementById('player2GamesWon');
        const player1Display = document.getElementById('player1Display');
        const player2Display = document.getElementById('player2Display');
        const currentPlayerIndicator = document.getElementById('currentPlayerIndicator');
        const turnScoreInput = document.getElementById('turnScoreInput');
        const submitTurnScoreBtn = document.getElementById('submitTurnScoreBtn');
        const undoTurnBtn = document.getElementById('undoTurnBtn');
        const messageArea501 = document.getElementById('messageArea501');
        const checkoutSuggestion501 = document.getElementById('checkoutSuggestion501');
        const reset501GameBtn = document.getElementById('reset501GameBtn');

        // --- State ---
        // Variables to hold the current state of the games
        let currentGameScore = 0;
        let playerNames = ["Player 1", "Player 2"];
        let playerScores = [501, 501];
        let playerGamesWonTally = [0, 0];
        let currentPlayerIndex = 0;
        let legStartingPlayerIndex = 0;
        let legWon = false;
        let lastPlayerScores = null;
        let lastPlayerIndex = null;
        let lastGamesWonTally = null;
        let undoPossible = false;
        let nextLegTimeoutId = null;

        // --- Functions --- (JavaScript logic remains the same)

        function initializeGameData() {
            finishableScores = Object.keys(checkouts)
                                   .map(score => parseInt(score))
                                   .filter(score => !isNaN(score))
                                   .sort((a, b) => a - b);
            console.log(`Initialized practice game with ${finishableScores.length} possible scores.`);
        }

        function startNewPracticeGame() {
            const feedbackArea = feedbackAreaGame;
            let minScore = parseInt(minScoreInput.value) || 2;
            let maxScore = parseInt(maxScoreInput.value) || 170;
            feedbackArea.innerHTML = '';
            feedbackArea.className = 'mt-4 text-center font-medium min-h-[2em]';
            minScore = Math.max(2, minScore);
            maxScore = Math.min(170, maxScore);
            if (minScore > maxScore) {
                displayGameFeedback('Min score cannot be greater than Max score.', 'yellow', feedbackArea);
                gameScoreDisplay.textContent = '-';
                scoreInputGame.disabled = true;
                submitAnswerBtn.disabled = true;
                revealAnswerBtn.disabled = true;
                return;
            }
            minScoreInput.value = minScore;
            maxScoreInput.value = maxScore;
            const availableScores = finishableScores.filter(score => score >= minScore && score <= maxScore);
            if (availableScores.length === 0) {
                displayGameFeedback(`No standard checkouts found between ${minScore} and ${maxScore}.`, 'yellow', feedbackArea);
                gameScoreDisplay.textContent = '-';
                scoreInputGame.disabled = true;
                submitAnswerBtn.disabled = true;
                revealAnswerBtn.disabled = true;
                return;
            }
            const randomIndex = Math.floor(Math.random() * availableScores.length);
            currentGameScore = availableScores[randomIndex];
            gameScoreDisplay.textContent = currentGameScore;
            scoreInputGame.value = '';
            scoreInputGame.disabled = false;
            submitAnswerBtn.disabled = false;
            revealAnswerBtn.disabled = false;
            scoreInputGame.focus();
            console.log(`New practice game started. Score: ${currentGameScore} (Range: ${minScore}-${maxScore})`);
        }

        function checkPracticeAnswer() {
            const userAnswerRaw = scoreInputGame.value.trim();
            const targetScore = currentGameScore;
            const feedbackArea = feedbackAreaGame;
            if (!userAnswerRaw) {
                displayGameFeedback('Please enter your suggested checkout.', 'yellow', feedbackArea);
                return;
            }
            const parts = userAnswerRaw.split(/[\s,>]+/).filter(part => part.length > 0);
            const processedParts = parts.map(part => {
                const firstChar = part.charAt(0);
                if (firstChar >= '0' && firstChar <= '9') { return 'S' + part; }
                return part;
            });
            const prefixedUserAnswer = processedParts.join(' ');
            const correctOptions = checkouts[targetScore];
            if (!correctOptions) {
                console.error(`No checkout options found for score: ${targetScore}`);
                displayGameFeedback('Internal error: Could not find checkouts for this score.', 'red', feedbackArea);
                scoreInputGame.disabled = true; submitAnswerBtn.disabled = true; revealAnswerBtn.disabled = true;
                return;
            }
            const normalize = (str) => str.toUpperCase().replace(/->/g, ' ').replace(/,/g, ' ').replace(/\s+/g, ' ').trim();
            const normalizedUserAnswer = normalize(prefixedUserAnswer);
            const isCorrect = correctOptions.some(option => normalize(option) === normalizedUserAnswer);
            if (isCorrect) {
                displayGameFeedback(`ðŸŽ¯ Correct! "${prefixedUserAnswer}" is a valid checkout for ${targetScore}. Well done!`, 'green', feedbackArea);
            } else {
                displayGameFeedback(`Not quite! A common checkout for ${targetScore} is: <strong class="block mt-1">${correctOptions[0]}</strong>`, 'red', feedbackArea);
            }
            scoreInputGame.disabled = true; submitAnswerBtn.disabled = true; revealAnswerBtn.disabled = true;
            newGameBtn.focus();
        }

        function revealAnswer() {
            const targetScore = currentGameScore;
            const feedbackArea = feedbackAreaGame;
            const correctOptions = checkouts[targetScore];
            if (correctOptions && correctOptions.length > 0) {
                displayGameFeedback(`A possible checkout for ${targetScore} is: <strong class="block mt-1">${correctOptions[0]}</strong>`, 'blue', feedbackArea);
            } else {
                 displayGameFeedback(`No standard checkout found for ${targetScore}.`, 'yellow', feedbackArea);
                 console.error(`Attempted to reveal answer for score ${targetScore}, but no options found.`);
            }
            scoreInputGame.disabled = true; submitAnswerBtn.disabled = true; revealAnswerBtn.disabled = true;
            newGameBtn.focus();
        }

        function displayGameFeedback(message, type, areaElement) {
            areaElement.innerHTML = `<p class="feedback-item">${message}</p>`;
            let colorClass = 'text-gray-700';
            if (type === 'green') colorClass = 'text-green-600';
            if (type === 'red') colorClass = 'text-red-600';
            if (type === 'yellow') colorClass = 'text-yellow-600';
            if (type === 'blue') colorClass = 'text-blue-600';
            areaElement.className = `mt-4 text-center font-medium ${colorClass}`;
        }

        function displayLookupCheckouts() {
            const score = parseInt(scoreInputLookup.value);
            messageAreaLookup.textContent = ''; checkoutListLookup.innerHTML = '';
            if (isNaN(score)) { messageAreaLookup.textContent = 'Please enter a valid number.'; return; }
            if (score < 2 || score > 170) {
                messageAreaLookup.textContent = 'Score must be between 2 and 170.';
                checkoutListLookup.innerHTML = '<p class="text-gray-500 text-center">-</p>'; return;
            }
            if (impossibleCheckouts.includes(score)) {
                messageAreaLookup.textContent = `Score ${score} is not possible to checkout with 3 darts.`;
                checkoutListLookup.innerHTML = '<p class="text-gray-500 text-center">Aim to leave a finishable score.</p>'; return;
            }
            const options = checkouts[score];
            if (options && options.length > 0) {
                options.forEach((option, index) => {
                    const div = document.createElement('div');
                    div.className = 'bg-green-100 p-3 rounded-md text-green-800 font-medium result-item shadow-sm';
                    div.style.animationDelay = `${index * 0.05}s`; div.textContent = option;
                    checkoutListLookup.appendChild(div);
                });
            } else {
                let suggestion = "No standard checkout listed. Aim to leave a preferred double (e.g., 32, 40).";
                if (score > 1 && score <= 40 && score % 2 !== 0) { suggestion = `Hit S${score - (score-1)} (${score-1}) to leave D${(score-1)/2}.`; }
                else if (score > 40 && score <= 60) { suggestion = `Aim for S${score - 40} to leave D20, or S${score - 50} to leave DB.`; }
                checkoutListLookup.innerHTML = `<p class="text-gray-600 p-3 bg-yellow-100 rounded-md">${suggestion}</p>`;
            }
        }

        function startNextLeg() {
            console.log("Starting next leg automatically...");
            playerScores = [501, 501]; currentPlayerIndex = (legStartingPlayerIndex + 1) % 2;
            legStartingPlayerIndex = currentPlayerIndex; legWon = false;
            player1Score.textContent = playerScores[0]; player2Score.textContent = playerScores[1];
            player1GamesWon.textContent = playerGamesWonTally[0]; player2GamesWon.textContent = playerGamesWonTally[1];
            messageArea501.textContent = 'Next leg!'; checkoutSuggestion501.innerHTML = '';
            turnScoreInput.value = ''; turnScoreInput.disabled = false; submitTurnScoreBtn.disabled = false;
            lastPlayerScores = null; lastPlayerIndex = null; lastGamesWonTally = null;
            undoPossible = false; undoTurnBtn.disabled = true; nextLegTimeoutId = null;
            updateCurrentPlayerIndicator(); turnScoreInput.focus();
        }

        function resetCurrentLegManually() {
            if (nextLegTimeoutId) { clearTimeout(nextLegTimeoutId); nextLegTimeoutId = null; }
            playerNames[0] = player1NameInput.value || "Player 1"; playerNames[1] = player2NameInput.value || "Player 2";
            playerScores = [501, 501]; currentPlayerIndex = 0; legStartingPlayerIndex = 0; legWon = false;
            player1NameDisplay.textContent = playerNames[0]; player2NameDisplay.textContent = playerNames[1];
            player1Score.textContent = playerScores[0]; player2Score.textContent = playerScores[1];
            player1GamesWon.textContent = playerGamesWonTally[0]; player2GamesWon.textContent = playerGamesWonTally[1];
            messageArea501.textContent = 'Leg reset manually.'; checkoutSuggestion501.innerHTML = '';
            turnScoreInput.value = ''; turnScoreInput.disabled = false; submitTurnScoreBtn.disabled = false;
            lastPlayerScores = null; lastPlayerIndex = null; lastGamesWonTally = null;
            undoPossible = false; undoTurnBtn.disabled = true;
            updateCurrentPlayerIndicator(); turnScoreInput.focus();
            console.log("501 leg reset manually.");
        }

        function updateCurrentPlayerIndicator() {
             currentPlayerIndicator.textContent = `Current Player: ${playerNames[currentPlayerIndex]}`;
             const defaultNameColor = 'text-gray-800'; const defaultScoreColor = 'text-indigo-600';
             const highlightTextColor = 'text-green-800';
             const p1Elements = { display: player1Display, name: player1NameDisplay, score: player1Score };
             const p2Elements = { display: player2Display, name: player2NameDisplay, score: player2Score };
             const activePlayer = (currentPlayerIndex === 0) ? p1Elements : p2Elements;
             const inactivePlayer = (currentPlayerIndex === 0) ? p2Elements : p1Elements;
             activePlayer.display.classList.add('current-player-highlight');
             activePlayer.name.classList.remove(defaultNameColor); activePlayer.name.classList.add(highlightTextColor);
             activePlayer.score.classList.remove(defaultScoreColor); activePlayer.score.classList.add(highlightTextColor);
             inactivePlayer.display.classList.remove('current-player-highlight');
             inactivePlayer.name.classList.remove(highlightTextColor); inactivePlayer.name.classList.add(defaultNameColor);
             inactivePlayer.score.classList.remove(highlightTextColor); inactivePlayer.score.classList.add(defaultScoreColor);
        }

        function submitTurnScore() {
            if (legWon) return;
            const enteredScoreText = turnScoreInput.value; const enteredScore = parseInt(enteredScoreText);
            const messageArea = messageArea501; const suggestionArea = checkoutSuggestion501;
            messageArea.textContent = ''; suggestionArea.innerHTML = '';
            if (isNaN(enteredScore) || enteredScore < 0 || enteredScore > 180) {
                messageArea.textContent = 'Invalid score. Please enter 0-180.';
                turnScoreInput.select(); return;
            }
            lastPlayerScores = [...playerScores]; lastPlayerIndex = currentPlayerIndex; lastGamesWonTally = [...playerGamesWonTally];
            undoPossible = true; undoTurnBtn.disabled = false;
            let currentScore = playerScores[currentPlayerIndex];
            const potentialScore = currentScore - enteredScore;
            if (potentialScore < 2 && potentialScore !== 0) {
                messageArea.textContent = `${playerNames[currentPlayerIndex]} Bust! Score is ${currentScore}.`;
            } else {
                playerScores[currentPlayerIndex] = potentialScore;
                document.getElementById(`player${currentPlayerIndex + 1}Score`).textContent = potentialScore;
                messageArea.textContent = `${playerNames[currentPlayerIndex]} scored ${enteredScore}. Remaining: ${potentialScore}`;
                if (potentialScore === 0) {
                    playerGamesWonTally[currentPlayerIndex]++;
                    document.getElementById(`player${currentPlayerIndex + 1}GamesWon`).textContent = playerGamesWonTally[currentPlayerIndex];
                    displayGameFeedback(`GAME SHOT! Leg to ${playerNames[currentPlayerIndex]}! Starting next leg in 2s...`, 'green', messageArea501);
                    legWon = true;
                    turnScoreInput.disabled = true; submitTurnScoreBtn.disabled = true; undoTurnBtn.disabled = true;
                    nextLegTimeoutId = setTimeout(startNextLeg, 2000); return;
                }
            }
            currentPlayerIndex = (currentPlayerIndex + 1) % 2;
            updateCurrentPlayerIndicator();
            const nextPlayerScore = playerScores[currentPlayerIndex];
            suggestionArea.innerHTML = '';
            if (nextPlayerScore > 1 && nextPlayerScore <= 170 && !impossibleCheckouts.includes(nextPlayerScore)) {
                const suggestions = checkouts[nextPlayerScore];
                if (suggestions && suggestions.length > 0) {
                    suggestionArea.innerHTML = `<p class="text-sm mt-2 text-blue-600">${playerNames[currentPlayerIndex]}'s checkout: <strong>${suggestions.join(' / ')}</strong></p>`;
                }
            }
            turnScoreInput.value = ''; turnScoreInput.focus();
        }

        function undoLastTurn() {
            if (!undoPossible || lastPlayerScores === null) { console.log("Nothing to undo."); return; }
            console.log("Undoing last turn...");
            playerScores = [...lastPlayerScores]; currentPlayerIndex = lastPlayerIndex; playerGamesWonTally = [...lastGamesWonTally];
            legWon = false;
            if (nextLegTimeoutId) { clearTimeout(nextLegTimeoutId); nextLegTimeoutId = null; }
            player1Score.textContent = playerScores[0]; player2Score.textContent = playerScores[1];
            player1GamesWon.textContent = playerGamesWonTally[0]; player2GamesWon.textContent = playerGamesWonTally[1];
            updateCurrentPlayerIndicator();
            messageArea501.textContent = 'Last turn undone.'; checkoutSuggestion501.innerHTML = '';
            turnScoreInput.disabled = false; submitTurnScoreBtn.disabled = false; turnScoreInput.focus();
            undoPossible = false; lastPlayerScores = null; lastPlayerIndex = null; lastGamesWonTally = null; undoTurnBtn.disabled = true;
        }

        function switchMode(modeToShow) {
            lookupModeSection.classList.add('hidden'); gameModeSection.classList.add('hidden'); scoreTrackerModeSection.classList.add('hidden');
            lookupModeBtn.classList.replace('mode-button-active', 'mode-button-inactive'); gameModeBtn.classList.replace('mode-button-active', 'mode-button-inactive'); trackerModeBtn.classList.replace('mode-button-active', 'mode-button-inactive');
            if (nextLegTimeoutId) { clearTimeout(nextLegTimeoutId); nextLegTimeoutId = null; }
            if (modeToShow === 'game') {
                gameModeSection.classList.remove('hidden'); gameModeBtn.classList.replace('mode-button-inactive', 'mode-button-active');
                startNewPracticeGame();
            } else if (modeToShow === 'tracker') {
                scoreTrackerModeSection.classList.remove('hidden'); trackerModeBtn.classList.replace('mode-button-inactive', 'mode-button-active');
                updateCurrentPlayerIndicator(); turnScoreInput.focus();
            } else {
                lookupModeSection.classList.remove('hidden'); lookupModeBtn.classList.replace('mode-button-inactive', 'mode-button-active');
                scoreInputLookup.focus();
            }
        }

        // --- Event Listeners ---
        lookupModeBtn.addEventListener('click', () => switchMode('lookup'));
        gameModeBtn.addEventListener('click', () => switchMode('game'));
        trackerModeBtn.addEventListener('click', () => switchMode('tracker'));
        calculateBtnLookup.addEventListener('click', displayLookupCheckouts);
        scoreInputLookup.addEventListener('keypress', function(event) { if (event.key === 'Enter') { event.preventDefault(); calculateBtnLookup.click(); } });
        scoreInputLookup.addEventListener('input', () => { messageAreaLookup.textContent = ''; });
        submitAnswerBtn.addEventListener('click', checkPracticeAnswer);
        revealAnswerBtn.addEventListener('click', revealAnswer);
        newGameBtn.addEventListener('click', startNewPracticeGame);
        scoreInputGame.addEventListener('keypress', function(event) { if (event.key === 'Enter') { event.preventDefault(); if (!submitAnswerBtn.disabled) { submitAnswerBtn.click(); } } });
        scoreInputGame.addEventListener('input', () => { if (!submitAnswerBtn.disabled) { feedbackAreaGame.innerHTML = ''; feedbackAreaGame.className = 'mt-4 text-center font-medium min-h-[2em]'; } });
        submitTurnScoreBtn.addEventListener('click', submitTurnScore);
        reset501GameBtn.addEventListener('click', resetCurrentLegManually);
        undoTurnBtn.addEventListener('click', undoLastTurn);
        turnScoreInput.addEventListener('keypress', function(event) { if (event.key === 'Enter') { event.preventDefault(); if (!submitTurnScoreBtn.disabled && !legWon) { submitTurnScoreBtn.click(); } } });
        player1NameInput.addEventListener('input', (e) => {
            const newName = e.target.value || "Player 1";
            player1NameDisplay.textContent = newName; playerNames[0] = newName; updateCurrentPlayerIndicator();
        });
        player2NameInput.addEventListener('input', (e) => {
            const newName = e.target.value || "Player 2";
            player2NameDisplay.textContent = newName; playerNames[1] = newName; updateCurrentPlayerIndicator();
        });

        // --- Initialization ---
        initializeGameData();
        resetCurrentLegManually(); // Initialize 501 state on first load
        switchMode('lookup'); // Then switch view to lookup

    </script>
</body>
</html>
